{"version":3,"sources":["components/Navbar.js","components/Hero.js","components/ImageCard.js","components/CardBlock.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","role","aria-label","currentScore","highScore","Hero","ImageCard","onClick","imageClick","id","src","alt","name","CardBlock","characters","map","character","index","components_ImageCard","key","styles","fixFooter","position","width","bottom","overflow","height","fontSize","backgroundColor","Footer","style","images","sort","Math","random","App","state","clicked","appear","toggleAppear","_this","setState","shuffleCharacters","updateScore","newScore","indexOf","Object","toConsumableArray","concat","components_Navbar","this","components_Hero","react_transition_group","in","timeout","classNames","components_CardBlock","components_Footer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9bf1df01.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navbar = props => {\n    return (\n        <div>\n            <nav className=\"navbar navbar is-fixed-top\" role=\"navigation\" aria-label=\"main navigation\">\n                <div className=\"container\">\n                    <div className=\"navbar-end\">\n                        <div className=\"navbar-item\">\n                            <button className=\"button has-background-grey has-text-white-bis\">Score: {props.currentScore}</button>\n                            <button className=\"button has-background-grey has-text-white-bis\">Top Score: {props.highScore}</button>\n                        </div>\n                    </div>\n                </div>\n            </nav>\n        </div>\n    )\n}\n\nexport default Navbar;","import React from \"react\";\n\nconst Hero = () => {\n    return (\n        <section className=\"hero is-primary\">\n            <div className=\"hero-body\">\n                <div className=\"container\">\n                <h1 className=\"title is-uppercase\">\n                    Star Trek Clicky Game!\n                </h1>\n                <h2 className=\"subtitle is-uppercase\">\n                    Click on an image to earn points, but don't click on any more than once!\n                </h2>\n                </div>\n            </div>\n        </section>\n    )\n}\n\nexport default Hero;","import React from \"react\";\n\nconst ImageCard = props => {\n    return (\n        <div className=\"card column is-one-fifth has-shadow\" onClick={() => props.imageClick(props.id)}>\n            <div className=\"card-image\">\n                <figure className=\"image is-4by3\">\n                    <img src={props.src} alt={props.name}></img>\n                </figure>\n            </div>\n        </div>\n    )\n}\n\nexport default ImageCard;","import React from \"react\";\nimport ImageCard from \"./ImageCard\";\n\nconst CardBlock = props => {\n    return (\n        <div className=\"container cards-container has-shadow\">\n            <div className=\"columns is-multiline\">\n                    {props.characters.map((character, index) => (\n                        <ImageCard key={index} id={character.id} name={character.name} src={character.src} imageClick={props.imageClick}/>\n                    ))}\n            </div>\n        </div>\n    )\n}\n\nexport default CardBlock;","import React from \"react\";\n\nconst styles = {\n    fixFooter: {\n        position: \"fixed\",\n        width: \"100%\",\n        bottom: \"0\",\n        overflow: \"hidden\",\n        height: \"50px\",\n        fontSize: \"11px\",\n        backgroundColor: \"rgba(255, 255, 255, 0.1)\"\n    }\n}\n\nconst Footer = () => {\n    return (\n        <div>\n            <footer style={styles.fixFooter}>\n                <div className=\"has-text-centered\">\n                    <p>\n                        <br />\n                        <strong className=\"has-text-black is-uppercase has-text-weight-bold\">Developed by Bryan Lee | U of U Full Stack Bootcamp | December 2018</strong>\n                    </p>\n                </div>\n            </footer>\n        </div>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport Navbar from \"./components/Navbar\";\nimport Hero from \"./components/Hero\";\nimport CardBlock from \"./components/CardBlock\";\nimport Footer from \"./components/Footer\";\nimport images from \"./images.json\"\nimport './App.css';\nimport { CSSTransition } from \"react-transition-group\"\n\nconst characters = images.sort(() => 0.5 - Math.random());\n\nclass App extends React.Component {\n\n  state = {\n    characters,\n    currentScore: 0,\n    highScore: 0,\n    clicked: [],\n    appear: true,\n  };\n\n  toggleAppear = () => {\n    this.setState({ appear: !this.state.appear });\n  }\n\n  shuffleCharacters = () => {\n    const characters = images.sort(() => 0.5 - Math.random());\n    this.setState({ characters: characters });\n  };\n\n  updateScore = () => {\n    this.setState({ currentScore: this.state.currentScore + 1 });\n    const newScore = this.state.currentScore + 1;\n    this.shuffleCharacters();\n    if (newScore >= this.state.highScore) {\n      this.setState({ highScore: newScore })\n    };\n  };\n\n  imageClick = id => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.setState({ clicked: [...this.state.clicked, id] });\n      this.updateScore();\n    } else {\n      this.setState({ currentScore: 0 });\n      this.setState({ clicked: [] });\n      this.shuffleCharacters();\n    };\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar currentScore={this.state.currentScore} highScore={this.state.highScore}/>\n        <Hero />\n        <CSSTransition in={this.state.appear} appear={true} timeout={600} classNames=\"fade\">\n          <CardBlock characters={this.state.characters} imageClick={this.imageClick}/>\n        </CSSTransition>\n        <Footer />\n      </div>\n    );\n  };\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}